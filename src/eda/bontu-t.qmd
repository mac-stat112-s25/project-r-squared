---
title: "Bontu T. EDA"
format: html
---


```{r}
#packages
library(auk) # to work with eBird data
library(dplyr)
library(lubridate)
library(rnaturalearth)
library(sf)
library(ggplot2)
library(gridExtra)
library(readr)
library(stringr)
library(maps)
library(mosaic)
```


```{r}
#data
gpkg_file <- "~/Documents/DS/project-r-squared/src/appx/gis-data.gpkg"

sed <-  "~/Documents/DS/project-r-squared/src/appx/ebd_US-AK_snoowl1_198001_202412_smp_relFeb-2025_sampling.txt"
checklists <- read_sampling(sed)
glimpse(checklists)

ebd <- "~/Documents/DS/project-r-squared/src/appx/ebd_US-AK_snoowl1_198001_202412_smp_relFeb-2025.txt"
observations <- read_ebd(ebd)
head(observations)
```

```{r}
#shared
checklists_shared <- read_sampling(sed, unique = FALSE)
# identify shared checklists
checklists_shared |> 
  filter(!is.na(group_identifier)) |> 
  arrange(group_identifier) |> 
  select(sampling_event_identifier, group_identifier)

checklists_unique <- auk_unique(checklists_shared, checklists_only = TRUE)
nrow(checklists_shared)
nrow(checklists_unique)
```

```{r}
#filter
checklists2 <- checklists |>
        filter(all_species_reported, year(observation_date) %in% c(1980:2024),
         month(observation_date) %in% c(4:10)) |>
  mutate(year = year(observation_date), month = month(observation_date))

observations2 <- observations |>
        filter(all_species_reported, year(observation_date) %in% c(1980:2024),
         month(observation_date) %in% c(4:10)) |>
  mutate(year = year(observation_date), month = month(observation_date))

#all months
checklists3 <- checklists |>
        filter(all_species_reported, year(observation_date) %in% c(1980:2024)) |>
  mutate(year = year(observation_date))

observations3 <- observations |>
        filter(all_species_reported, year(observation_date) %in% c(1980:2024)) |>
  mutate(year = year(observation_date))
```

```{r}
#geometry
# convert checklist locations to points geometries
checklists_sf2 <- checklists2 |> 
  select(checklist_id, latitude, longitude) |> 
  st_as_sf(coords = c("longitude", "latitude"), crs = 4326)

# boundary of study region, buffered by 1 km
study_region_buffered <- read_sf("~/Documents/DS/project-r-squared/src/appx/gis-data.gpkg", layer = "ne_states") |>
  # sf does not properly buffer complex polygons in lat/lng coordinates
  # so we temporarily project the data to a planar coordinate system
  st_transform(crs = 8857) |>
  filter(state_code == "US-AK") |>
  st_buffer(dist = 1000) |> 
  st_transform(crs = st_crs(checklists_sf2))

# spatially subset the checklists to those in the study region
in_region <- checklists_sf2[study_region_buffered, ]

# join to checklists and observations to remove checklists outside region
checklists2 <- semi_join(checklists2, in_region, by = "checklist_id")
observations2 <- semi_join(observations2, in_region, by = "checklist_id")


#all months
checklists_sf3 <- checklists3 |> 
  select(checklist_id, latitude, longitude) |> 
  st_as_sf(coords = c("longitude", "latitude"), crs = 4326)
study_region_buffered <- read_sf("~/Documents/DS/project-r-squared/src/appx/gis-data.gpkg", layer = "ne_states") |>
  # sf does not properly buffer complex polygons in lat/lng coordinates
  # so we temporarily project the data to a planar coordinate system
  st_transform(crs = 8857) |>
  filter(state_code == "US-AK") |>
  st_buffer(dist = 1000) |> 
  st_transform(crs = st_crs(checklists_sf3))
in_region <- checklists_sf3[study_region_buffered, ]
checklists3 <- semi_join(checklists3, in_region, by = "checklist_id")
observations3 <- semi_join(observations3, in_region, by = "checklist_id")
```

```{r}
#zero-filling
zf <- auk_zerofill(observations2, checklists2, collapse = TRUE)

#all months
zf3 <- auk_zerofill(observations3, checklists3, collapse = TRUE)
```

```{r}
#time
# function to convert time observation to hours since midnight
time_to_decimal <- function(x) {
  x <- hms(x, quiet = TRUE)
  hour(x) + minute(x) / 60 + second(x) / 3600
}

# clean up variables
zf <- zf |> 
  mutate(
    # convert count to integer and X to NA
    # ignore the warning "NAs introduced by coercion"
    observation_count = as.integer(observation_count),
    # effort_distance_km to 0 for stationary counts
    effort_distance_km = if_else(protocol_type == "Stationary", 
                                 0, effort_distance_km),
    # convert duration to hours
    effort_hours = duration_minutes / 60,
    # speed km/h
    effort_speed_kmph = effort_distance_km / effort_hours,
    # convert time to decimal hours since midnight
    hours_of_day = time_to_decimal(time_observations_started),
    # split date into year and day of year
    year = year(observation_date),
    day_of_year = yday(observation_date)
  )


#all months
zf3 <- zf3 |> 
  mutate(
    # convert count to integer and X to NA
    # ignore the warning "NAs introduced by coercion"
    observation_count = as.integer(observation_count),
    # effort_distance_km to 0 for stationary counts
    effort_distance_km = if_else(protocol_type == "Stationary", 
                                 0, effort_distance_km),
    # convert duration to hours
    effort_hours = duration_minutes / 60,
    # speed km/h
    effort_speed_kmph = effort_distance_km / effort_hours,
    # convert time to decimal hours since midnight
    hours_of_day = time_to_decimal(time_observations_started),
    # split date into year and day of year
    year = year(observation_date),
    day_of_year = yday(observation_date)
  )
```

```{r}
# additional variation filtering
zf_filtered <- zf |> 
  filter(protocol_type %in% c("Stationary", "Traveling"),
         effort_hours <= 6,
         effort_distance_km <= 10,
         effort_speed_kmph <= 100,
         number_observers <= 10)


#all months
zf_filtered3 <- zf3 |> 
  filter(protocol_type %in% c("Stationary", "Traveling"),
         effort_hours <= 6,
         effort_distance_km <= 10,
         effort_speed_kmph <= 100,
         number_observers <= 10)
```

```{r}
#cleaning
checklists2 <- zf_filtered |> 
  select(checklist_id, observer_id,
         observation_count, species_observed, 
         state_code, locality_id, latitude, longitude,
         protocol_type, all_species_reported,
         observation_date, year, day_of_year,
         hours_of_day, 
         effort_hours, effort_distance_km, effort_speed_kmph,
         number_observers, month)
write_csv(checklists2, "~/Documents/DS/project-r-squared/src/appx/checklists-zf_snoowl_us-ak.csv", na = "")

checklists3 <- zf_filtered3 |> 
  select(checklist_id, observer_id,
         observation_count, species_observed, 
         state_code, locality_id, latitude, longitude,
         protocol_type, all_species_reported,
         observation_date, year, day_of_year,
         hours_of_day, 
         effort_hours, effort_distance_km, effort_speed_kmph,
         number_observers)
write_csv(checklists3, "~/Documents/DS/project-r-squared/src/appx/checklists-zf_snoowl_us-ak_3.csv", na = "")
```

```{r}
#mapping
ne_land <- read_sf("~/Documents/DS/project-r-squared/src/appx/gis-data.gpkg", "ne_land") |> 
  st_geometry()
ne_country_lines <- read_sf("~/Documents/DS/project-r-squared/src/appx/gis-data.gpkg", "ne_country_lines") |> 
  st_geometry()
ne_state_lines <- read_sf("~/Documents/DS/project-r-squared/src/appx/gis-data.gpkg", "ne_state_lines") |> 
  st_geometry()
study_region <- read_sf("~/Documents/DS/project-r-squared/src/appx/gis-data.gpkg", "ne_states") |> 
  filter(state_code == "US-AK") |> 
  st_geometry()

checklists_sf2 <- checklists2 |> 
  # convert to spatial points
  st_as_sf(coords = c("longitude", "latitude"), crs = 4326) |> 
  select(species_observed, year)

ggplot(checklists_sf) +
  geom_sf() +
  geom_point(
    data = checklists,
    aes(x = longitude, y = latitude)
  ) +
  theme_map()


#all months
checklists_sf3 <- checklists3 |> 
  # convert to spatial points
  st_as_sf(coords = c("longitude", "latitude"), crs = 4326) |> 
  select(species_observed, year)

ggplot(checklists_sf3) +
  geom_sf() +
  geom_point(
    data = checklists,
    aes(x = longitude, y = latitude)
  ) +
  theme_map()
```

```{r}
checklists2 |>
  filter(species_observed == TRUE) |>
  group_by(observation_date) |>
  summarize(avLat = mean(latitude)) |>
  ggplot(aes(x = observation_date, y = avLat)) +
  geom_smooth() +
  theme_classic() +
  labs(x = "Date (months 4-10)", y = "Average Latitude", title = "Average Latitude over Time in Summer Months, 1988-2024") 

#all months
checklists3 |>
  filter(species_observed == TRUE) |>
  group_by(observation_date) |>
  summarize(avLat = mean(latitude)) |>
  ggplot(aes(x = observation_date, y = avLat)) +
  geom_smooth() +
  theme_classic() +
  labs(x = "Date (all year)", y = "Average Latitude", title = "Average Latitude over Time in All Year Around, 1988-2024")
```


```{r}
#average latitude
min_x <- bbox_study_region["xmin"]
max_x <- bbox_study_region["xmax"]
min_y <- bbox_study_region["ymin"]
max_y <- bbox_study_region["ymax"]

# Print out the minimum and maximum values

# ggplot() +
#   geom_sf(data = ne_land, fill = "white") +   # Land background
#   geom_sf(data = ne_country_lines, color = "black", size = 0.3) +  # Country borders
#   geom_sf(data = ne_state_lines, color = "gray40", size = 0.2) +  # State borders
#   geom_sf(data = study_region_buffered, fill = NA, color = "red", size = 0.8) + # Outline study area
#   geom_sf(data = checklists_sf, aes(color = as.factor(year)), size = 2, shape = 16) +
#   theme_minimal() +
#   labs(title = "Alaska",
#        caption = "Data from Natural Earth / GIS package") +
#   coord_sf(xlim = c(min_x, max_x), ylim = c(min_y, max_y)) +
#     scale_color_viridis_d(name = "Year") 

checklists_sf2 |>
  filter(species_observed == TRUE) |>
  group_by(year) |>
  summarise(s = sum(species_observed)) |>
  arrange(desc(s))
  
c_true2 <- checklists_sf2 |>
  filter(species_observed == TRUE, year %in% c(1988, 1993, 2009, 2013, 2018, 2024))

summer <- ggplot() +
  geom_sf(data = ne_land, fill = "white") +   # Land background
  geom_sf(data = ne_country_lines, color = "black", size = 0.3) +  # Country borders
  geom_sf(data = ne_state_lines, color = "gray40", size = 0.2) +  # State borders
  geom_sf(data = study_region_buffered, fill = NA, color = "lightblue", size = 0.8) + # Outline study area
  geom_sf(data = c_true2, aes(col = as.factor(year)), size = 2, alpha = .9, shape = 16) +
  theme_minimal() +
  labs(title = "Observations of Snowy Owls in Alaska (Summer Months)") +
  coord_sf(xlim = c(min_x, max_x), ylim = c(min_y, max_y)) +
      scale_color_viridis_d(name = "Year")
   # facet_wrap(~year) +
   # theme(panel.spacing = unit(2, "lines"), 
   #       axis.text.x = element_text(size = 7))


# Plot Alaska boundary and checklists
# ggplot() +
#   # Plot study region (Alaska boundary)
#   geom_sf(data = study_region_buffered, fill = "lightblue", color = "black") +
#   
#   # Plot checklist points
#   geom_sf(data = checklists_sf, aes(color = year), color = "red", size = 2, shape = 16) +
#   
#   # Customize theme
#   theme_minimal() +
#   labs(title = "Checklists in Alaska", 
#        subtitle = "Points representing checklist locations") +
#   theme(axis.text = element_text(size = 8)) 


#all months
checklists_sf3 |>
  filter(species_observed == TRUE) |>
  group_by(year) |>
  summarise(s = sum(species_observed)) |>
  arrange(desc(s))
  
c_true3 <- checklists_sf3 |>
  filter(species_observed == TRUE, year %in% c(1988, 1993, 2009, 2013, 2018, 2024))

all_months <- ggplot() +
  geom_sf(data = ne_land, fill = "white") +   # Land background
  geom_sf(data = ne_country_lines, color = "black", size = 0.3) +  # Country borders
  geom_sf(data = ne_state_lines, color = "gray40", size = 0.2) +  # State borders
  geom_sf(data = study_region_buffered, fill = NA, color = "lightblue", size = 0.8) + # Outline study area
  geom_sf(data = c_true3, aes(col = as.factor(year)), size = 2, alpha = .9, shape = 16) +
  theme_minimal() +
  labs(title = "Observations of Snowy Owls in Alaska (All Year)") +
  coord_sf(xlim = c(min_x, max_x), ylim = c(min_y, max_y)) +
      scale_color_viridis_d(name = "Year")
   # facet_wrap(~year) +
   # theme(panel.spacing = unit(2, "lines"), 
   #       axis.text.x = element_text(size = 7))

summer
all_months
```
